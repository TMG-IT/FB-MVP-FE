// Mixin for setting margins left and right to auto for centering
@mixin push--auto {
    margin: {
        left: auto;
        right: auto;
    }
}


// Mixin for css-triangles
@mixin css-triangle($color, $direction, $size: 6px, $position: absolute, $round: false){
    @include pseudo($pos: $position);
    width: 0;
    height: 0;
    @if $round {
        border-radius: 3px;
    }
    @if $direction == down {
        border-left: $size solid transparent;
        border-right: $size solid transparent;
        border-top: $size solid $color;
        margin-top: 0 - round( $size / 2.5 );
    } @else if $direction == up {
        border-left: $size solid transparent;
        border-right: $size solid transparent;
        border-bottom: $size solid $color;
        margin-bottom: 0 - round( $size / 2.5 );
    } @else if $direction == right {
        border-top: $size solid transparent;
        border-bottom: $size solid transparent;
        border-left: $size solid $color;
        margin-right: -$size;
    } @else if  $direction == left {
        border-top: $size solid transparent;
        border-bottom: $size solid transparent;
        border-right: $size solid $color;
        margin-left: -$size;
    }
}


// Mixin for placeholders

@mixin input-placeholder {
    &.placeholder { @content; }
    &:-moz-placeholder { @content; }
    &::-moz-placeholder { @content; }
    &:-ms-input-placeholder { @content; }
    &::-webkit-input-placeholder { @content; }
}

/*
 * Media query mixin. Ignore error in this mixin.
 */
@mixin media($query) {
  @media screen and #{inspect(map-get($media-queries, $query))} {
    @content;
  }
}

/* --------------------------------
    Font size mixin.
-------------------------------- */
@mixin font-size($size) {
  $font-map: map-get($font-sizes, $size);

  @each $breakpoint,
  $font-size in $font-map {
    @if $breakpoint==null {
      @include make-font-size($font-size);
    }

    @else {
      @include media($breakpoint) {
        @include make-font-size($font-size);
      }
    }
  }
}

/* --------------------------------
   Helper mixin for generating font size.
-------------------------------- */
@mixin make-font-size($font-size) {
  @if type-of($font-size)=='list' {
    font-size: nth($font-size, 1)*1px;

    @if length($font-size)>1 {
      line-height: nth($font-size, 2)*1px;
    }
  }

  @else {
    font-size: $font-size;
  }
}

// Mixin for setting margins left and right to auto for centering
@mixin push--auto {
    margin: {
        left: auto;
        right: auto;
    }
}


// Mixin for css-triangles
@mixin css-triangle($color, $direction, $size: 6px, $position: absolute, $round: false){
    @include pseudo($pos: $position);
    width: 0;
    height: 0;
    @if $round {
        border-radius: 3px;
    }
    @if $direction == down {
        border-left: $size solid transparent;
        border-right: $size solid transparent;
        border-top: $size solid $color;
        margin-top: 0 - round( $size / 2.5 );
    } @else if $direction == up {
        border-left: $size solid transparent;
        border-right: $size solid transparent;
        border-bottom: $size solid $color;
        margin-bottom: 0 - round( $size / 2.5 );
    } @else if $direction == right {
        border-top: $size solid transparent;
        border-bottom: $size solid transparent;
        border-left: $size solid $color;
        margin-right: -$size;
    } @else if  $direction == left {
        border-top: $size solid transparent;
        border-bottom: $size solid transparent;
        border-right: $size solid $color;
        margin-left: -$size;
    }
}
/*
 * Media query mixin. Ignore error in this mixin.
 */
@mixin media($query) {
  @media screen and #{inspect(map-get($media-queries, $query))} {
    @content;
  }
}

/*
 * Font size mixin.
 */
@mixin font-size($size) {
  $font-map: map-get($font-sizes, $size);

  @each $breakpoint, $font-size in $font-map {
    @if $breakpoint == null {
      @include make-font-size($font-size);
    } @else {
      @include media($breakpoint) {
        @include make-font-size($font-size);
      }
    }
  }
}


// Mixin for placeholders

@mixin input-placeholder {
    &.placeholder { @content; }
    &:-moz-placeholder { @content; }
    &::-moz-placeholder { @content; }
    &:-ms-input-placeholder { @content; }
    &::-webkit-input-placeholder { @content; }
}
